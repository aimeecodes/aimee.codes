I"ËÑ<p>In my last post about the Iowa housing data set, I spent some time working with a specific logical flow for filling categorical NA values - you can find that post <a href="/blog/2020/11/11/filling-NA-values">here</a>.
In the post previous to that, I visualized some features, using a lot of box / violin plots, count plots, and some linear regression scatter plots comparing the distribution of SalePrices when sorted by specific features. If you would like a refresher, check that post out <a href="/blog/2020/08/05/iowa-housing-exploration">here</a>.</p>

<p>For today‚Äôs post, I‚Äôm going to walk through my process of cleaning the data. Thanks to Kaggle users <a href="https://www.kaggle.com/datafan07">Ertuƒürul Demir</a> and <a href="https://www.kaggle.com/goldens">Golden</a> for posting their in-depth notebooks. Both contain a wealth of information and provide a great starting base for other novice data analysts.</p>

<hr />

<h3 id="examining-the-missing-data">Examining the Missing Data</h3>

<p>By now, we should be quite familiar with the data set (unless you haven‚Äôt been working with the data set daily like I have‚Ä¶), but let‚Äôs go ahead and summarize the numerical data once more. Below, you‚Äôll see some <b>count</b> cells are highlighted in orange - these are features with missing values.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">train_data</span><span class="p">.</span><span class="n">describe</span><span class="p">()</span></code></pre></figure>

<iframe src="/assets/html-tables/train_data_describe.html" width="100%" height="225px"></iframe>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">test_data</span><span class="p">.</span><span class="n">describe</span><span class="p">()</span></code></pre></figure>

<iframe src="/assets/html-tables/test_data_describe.html" width="100%" height="225px"></iframe>

<p>The first thing I‚Äôd like to do is figure out what‚Äôs going on with any null / NA values in both the train and test set, so I can keep as much information in my data as possible. I merged the 2 data sets, and created a summary table with an overview of unique values for categorical features, the min/max/mean/median for numerical features, and percentage of samples that have an NA value:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">missingValues</span><span class="p">.</span><span class="n">py</span></code></pre></figure>

<iframe src="/assets/html-tables/missing-values.html" width="100%" height="280px"></iframe>

<hr />

<h3 id="filling-the-missing-data">Filling the Missing Data</h3>

<p>Using logical structures within the pandas <code>fillna</code> method, I‚Äôm going to patch up the holes in our data.</p>

<h4 id="categorical-features-with-na--nan-which-mean-none">Categorical Features with ‚ÄúNA / nan‚Äù which mean ‚ÄúNone‚Äù</h4>
<h5 id="poolqc-miscfeature-alley-fence-fireplacequ-garagefinish-garagequal-garagecond-garagetype-bsmtcond-bsmtexposure-bsmtqual-bsmtfintype1-bsmtfintype2-masvnrtype">PoolQC, MiscFeature, Alley, Fence, FireplaceQu, GarageFinish, GarageQual, GarageCond, GarageType, BsmtCond, BsmtExposure, BsmtQual, BsmtFinType1, BsmtFinType2, MasVnrType</h5>

<p>For many of the categorical features, <code>NA</code> is used if the sample doesn‚Äôt contain the given feature. For these samples, we will change the sample feature to <code>None</code> instead.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">none_cols</span> <span class="o">=</span> <span class="p">[</span><span class="s">'PoolQC'</span><span class="p">,</span> <span class="s">'MiscFeature'</span><span class="p">,</span> <span class="s">'Alley'</span><span class="p">,</span> <span class="s">'Fence'</span><span class="p">,</span> <span class="s">'FireplaceQu'</span><span class="p">,</span> <span class="s">'GarageFinish'</span><span class="p">,</span> <span class="s">'GarageQual'</span><span class="p">,</span> <span class="s">'GarageCond'</span><span class="p">,</span> <span class="s">'GarageType'</span><span class="p">,</span> <span class="s">'BsmtCond'</span><span class="p">,</span>
<span class="s">'BsmtExposure'</span><span class="p">,</span> <span class="s">'BsmtQual'</span><span class="p">,</span> <span class="s">'BsmtFinType1'</span><span class="p">,</span> <span class="s">'BsmtFinType2'</span><span class="p">,</span> <span class="s">'MasVnrType'</span><span class="p">]</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">none_cols</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">ds</span> <span class="ow">in</span> <span class="p">(</span><span class="n">test_data</span><span class="p">,</span> <span class="n">train_data</span><span class="p">,</span> <span class="n">merge_data</span><span class="p">):</span>
        <span class="n">ds</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">ds</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">fillna</span><span class="p">(</span><span class="s">"None"</span><span class="p">)</span></code></pre></figure>

<h4 id="numerical-features-with-na--nan-which-mean-0">Numerical features with ‚ÄúNA / nan‚Äù which mean 0</h4>
<h5 id="garageyrblt-masvnrarea-bsmtfullbath-bsmthalfbath-bsmtfinsf1-bsmtfinsf2-bsmtunfsf-totalbsmtsf-garagecars-garagearea">GarageYrBlt, MasVnrArea, BsmtFullBath, BsmtHalfBath, BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, GarageCars, GarageArea</h5>

<p>These numerical features just need 0 instead of <code>NA</code>, since the feature doesn‚Äôt exist.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">zero_cols</span> <span class="o">=</span> <span class="p">[</span><span class="s">'GarageYrBlt'</span><span class="p">,</span> <span class="s">'MasVnrArea'</span><span class="p">,</span> <span class="s">'BsmtFullBath'</span><span class="p">,</span> <span class="s">'BsmtHalfBath'</span><span class="p">,</span> <span class="s">'BsmtFinSF1'</span><span class="p">,</span> <span class="s">'BsmtFinSF2'</span><span class="p">,</span> <span class="s">'BsmtUnfSF'</span><span class="p">,</span> <span class="s">'TotalBsmtSF'</span><span class="p">]</span>

<span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">zero_cols</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">ds</span> <span class="ow">in</span> <span class="p">(</span><span class="n">test_data</span><span class="p">,</span> <span class="n">train_data</span><span class="p">,</span> <span class="n">merge_data</span><span class="p">):</span>
	   <span class="n">ds</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">ds</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></code></pre></figure>

<h4 id="categorical-features-with-na--nan-which-need-examination">Categorical features with ‚ÄúNA / nan‚Äù which need examination</h4>
<h5 id="mszoning-functional-exterior1st-exterior2nd-electrical-kitchenqual-saletype-utilities">MSZoning, Functional, Exterior1st, Exterior2nd, Electrical, KitchenQual, SaleType, Utilities</h5>

<p>These are categorical features which are missing from 1-4 samples.</p>

<h5 id="mszoning">MSZoning</h5>

<p><em>This process is the subject of another post, which can be found <a href="/_posts/2020-11-11-filling-NA-values">here</a>!</em></p>

<p>Here‚Äôs the short snippet of code, included in my <code>iowaprerun.py</code> script:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">ds</span> <span class="ow">in</span> <span class="p">(</span><span class="n">test_data</span><span class="p">,</span> <span class="n">train_data</span><span class="p">,</span> <span class="n">merge_data</span><span class="p">):</span>
    <span class="n">ds</span><span class="p">[</span><span class="s">'MSZoning'</span><span class="p">]</span> <span class="o">=</span> <span class="n">ds</span><span class="p">[</span><span class="s">'MSZoning'</span><span class="p">].</span><span class="n">fillna</span><span class="p">(</span><span class="n">ds</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">'Neighborhood'</span><span class="p">)[</span><span class="s">'MSZoning'</span><span class="p">].</span><span class="n">transform</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="n">mode</span><span class="p">().</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span></code></pre></figure>

<h5 id="functional">Functional</h5>

<p>It appears <code>Functional</code> measures how many safety deductions the house has / how much overall damage there is, which we will try to predict using 4 features: <code>OverallCond, BsmtCond, ExterCond, GarageCond</code>. These features should give us an idea of any damage to the home, and how <code>Functional</code> is affected.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">condFeatures</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Id'</span><span class="p">,</span> <span class="s">'Functional'</span><span class="p">,</span> <span class="s">'OverallCond'</span><span class="p">,</span> <span class="s">'BsmtCond'</span><span class="p">,</span> <span class="s">'ExterCond'</span><span class="p">,</span> <span class="s">'GarageCond'</span><span class="p">]</span></code></pre></figure>

<p>Only 2 samples from the test set are missing this feature:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">mask4</span> <span class="o">=</span> <span class="n">merge_data</span><span class="p">[</span><span class="s">'Functional'</span><span class="p">].</span><span class="n">isna</span><span class="p">()</span>
<span class="n">merge_data</span><span class="p">[</span><span class="n">mask4</span><span class="p">][</span><span class="n">condFeatures</span><span class="p">]</span>

        <span class="n">Id</span> <span class="n">Functional</span>  <span class="n">OverallCond</span> <span class="n">BsmtCond</span> <span class="n">ExterCond</span> <span class="n">GarageCond</span>
<span class="mi">2216</span>  <span class="mi">2217</span>        <span class="n">NaN</span>            <span class="mi">5</span>     <span class="bp">None</span>        <span class="n">Po</span>         <span class="n">Po</span>
<span class="mi">2473</span>  <span class="mi">2474</span>        <span class="n">NaN</span>            <span class="mi">1</span>       <span class="n">Fa</span>        <span class="n">Fa</span>         <span class="n">Fa</span></code></pre></figure>

<p>After looking at this table, I thought it would be easier to parse this data if the features were encoded as an integer instead of a categorical variable (which is only really a problem if we start to question the ‚Äúscale‚Äù of damage and if it‚Äôs truly linear‚Ä¶). Still, I decided to go ahead and recode all ‚ÄòcondFeatures‚Äô features using a integer scale (I‚Äôll do this to all categorical variables later):</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">cond_map</span> <span class="o">=</span> <span class="p">{</span>       <span class="o">|</span>     <span class="n">func_map</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'None'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>     <span class="o">|</span>        <span class="s">'Sal'</span>  <span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="s">'Po'</span>  <span class="p">:</span> <span class="mi">1</span><span class="p">,</span>     <span class="o">|</span>        <span class="s">'Sev'</span>  <span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="s">'Fa'</span>  <span class="p">:</span> <span class="mi">2</span><span class="p">,</span>     <span class="o">|</span>        <span class="s">'Maj2'</span> <span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
    <span class="s">'TA'</span>  <span class="p">:</span> <span class="mi">3</span><span class="p">,</span>     <span class="o">|</span>        <span class="s">'Maj1'</span> <span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="s">'Gd'</span>  <span class="p">:</span> <span class="mi">4</span><span class="p">,</span>     <span class="o">|</span>        <span class="s">'Mod'</span>  <span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="s">'Ex'</span>  <span class="p">:</span> <span class="mi">5</span>      <span class="o">|</span>        <span class="s">'Min2'</span> <span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
<span class="p">}</span>                  <span class="o">|</span>        <span class="s">'Min1'</span> <span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
                   <span class="o">|</span>        <span class="s">'Typ'</span>  <span class="p">:</span> <span class="mi">7</span>
                   <span class="o">|</span>     <span class="p">}</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">merge_data</span><span class="p">[</span><span class="s">'BsmtCond'</span><span class="p">]</span> <span class="o">=</span> <span class="n">merge_data</span><span class="p">[</span><span class="s">'BsmtCond'</span><span class="p">].</span><span class="nb">map</span><span class="p">(</span><span class="n">cond_map</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="s">'int'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">merge_data</span><span class="p">[</span><span class="s">'ExterCond'</span><span class="p">]</span> <span class="o">=</span> <span class="n">merge_data</span><span class="p">[</span><span class="s">'ExterCond'</span><span class="p">].</span><span class="nb">map</span><span class="p">(</span><span class="n">cond_map</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="s">'int'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">merge_data</span><span class="p">[</span><span class="s">'GarageCond'</span><span class="p">]</span> <span class="o">=</span> <span class="n">merge_data</span><span class="p">[</span><span class="s">'GarageCond'</span><span class="p">].</span><span class="nb">map</span><span class="p">(</span><span class="n">cond_map</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="s">'int'</span><span class="p">)</span></code></pre></figure>

<p>Then, I put all the examples with <code>Functional</code> values into a dataframe to do some correlation analysis, and map the functionality to the <code>func_map</code> above:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&gt;&gt;&gt;</span> <span class="n">mask5</span> <span class="o">=</span> <span class="n">merge_data</span><span class="p">[</span><span class="s">'Functional'</span><span class="p">].</span><span class="n">isna</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">condfeatdf</span> <span class="o">=</span> <span class="n">merge_data</span><span class="p">[</span><span class="o">~</span><span class="n">mask5</span><span class="p">][</span><span class="n">condFeatures</span><span class="p">].</span><span class="n">copy</span><span class="p">()</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">condfeatdf</span><span class="p">[</span><span class="s">'Functional'</span><span class="p">]</span> <span class="o">=</span> <span class="n">condfeatdf</span><span class="p">[</span><span class="s">'Functional'</span><span class="p">].</span><span class="nb">map</span><span class="p">(</span><span class="n">func_map</span><span class="p">).</span><span class="n">astype</span><span class="p">(</span><span class="s">'int'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">condfeatdf</span><span class="p">.</span><span class="n">corr</span><span class="p">()[</span><span class="mi">1</span><span class="p">:][[</span><span class="s">'Functional'</span><span class="p">,</span> <span class="s">'OverallCond'</span><span class="p">,</span> <span class="s">'BsmtCond'</span><span class="p">,</span> <span class="s">'ExterCond'</span><span class="p">,</span> <span class="s">'GarageCond'</span><span class="p">]]</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>             <span class="n">Functional</span>  <span class="n">OverallCond</span>  <span class="n">BsmtCond</span>  <span class="n">ExterCond</span>  <span class="n">GarageCond</span>
<span class="n">Functional</span>                  <span class="mf">0.118222</span>  <span class="mf">0.190537</span>   <span class="mf">0.074505</span>    <span class="mf">0.090145</span>
<span class="n">OverallCond</span>                           <span class="mf">0.090408</span>   <span class="mf">0.403052</span>    <span class="mf">0.045268</span>
<span class="n">BsmtCond</span>                                         <span class="mf">0.096040</span>    <span class="mf">0.140137</span>
<span class="n">ExterCond</span>                                                    <span class="mf">0.093949</span>
<span class="n">GarageCond</span>                                                           
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span></code></pre></figure>

<p>Going to leave this for now, since I‚Äôm a little tired of looking at it, come back to this one</p>

<h5 id="exterior-1st--exterior-2nd">Exterior 1st / Exterior 2nd</h5>

<p>There‚Äôs only 1 sample that is missing both Ext1 and Ext2 features:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">mask6</span> <span class="o">=</span> <span class="n">merge_data</span><span class="p">[</span><span class="s">'Exterior1st'</span><span class="p">].</span><span class="n">isna</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">mask7</span> <span class="o">=</span> <span class="n">merge_data</span><span class="p">[</span><span class="s">'Exterior2nd'</span><span class="p">].</span><span class="n">isna</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">merge_data</span><span class="p">[</span><span class="n">mask6</span> <span class="o">&amp;</span> <span class="n">mask7</span><span class="p">][</span><span class="s">'ExterQual'</span><span class="p">,</span> <span class="s">'ExterCond'</span><span class="p">,</span> <span class="s">'Neighborhood'</span><span class="p">,</span> <span class="s">'MSSubClass'</span><span class="p">]</span>

     <span class="n">ExterQual</span>  <span class="n">ExterCond</span> <span class="n">Neighborhood</span>
<span class="mi">2151</span>        <span class="n">TA</span>          <span class="mi">3</span>      <span class="n">Edwards</span></code></pre></figure>

<p>We‚Äôll go ahead and assign the value according to the most common in the <code>Neighborhood</code>, using the same logical structure as we used for filling <code>MSZoning</code> NAs.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="p">(</span><span class="s">'Exterior1st'</span><span class="p">,</span> <span class="s">'Exterior2nd'</span><span class="p">):</span>
<span class="o">&gt;&gt;&gt;</span>    <span class="k">for</span> <span class="n">ds</span> <span class="ow">in</span> <span class="p">(</span><span class="n">test_data</span><span class="p">,</span> <span class="n">train_data</span><span class="p">,</span> <span class="n">merge_data</span><span class="p">):</span>
<span class="o">&gt;&gt;&gt;</span>        <span class="n">ds</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">ds</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">fillna</span><span class="p">(</span><span class="n">ds</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">'Neighborhood'</span><span class="p">)[</span><span class="n">col</span><span class="p">].</span><span class="n">transform</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="n">mode</span><span class="p">().</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span></code></pre></figure>

<h5 id="electrical--kitchenqual--saletype--utilities">Electrical / KitchenQual / SaleType / Utilities</h5>

<p>For these variables, there‚Äôs only 1-2 samples missing each feature, so we‚Äôre just going to fill it with the mode of the feature from the dataset.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="p">(</span><span class="s">'Electrical'</span><span class="p">,</span> <span class="s">'KitchenQual'</span><span class="p">,</span> <span class="s">'SaleType'</span><span class="p">,</span> <span class="s">'Utilities'</span><span class="p">):</span>
<span class="o">&gt;&gt;&gt;</span>    <span class="k">for</span> <span class="n">ds</span> <span class="ow">in</span> <span class="p">(</span><span class="n">test_data</span><span class="p">,</span> <span class="n">train_data</span><span class="p">,</span> <span class="n">merge_data</span><span class="p">):</span>
<span class="o">&gt;&gt;&gt;</span>        <span class="n">ds</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">ds</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">fillna</span><span class="p">(</span><span class="n">ds</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">mode</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span></code></pre></figure>

<h4 id="numerical-features-with-na--nan-which-need-examination">Numerical features with ‚ÄúNA / nan‚Äù which need examination</h4>
<h5 id="lotfrontage-garagearea-garagecars">LotFrontage, GarageArea/ GarageCars</h5>

<p>There‚Äôs a little more happening here than what appears at surface level, so let‚Äôs take a deeper dive into these features:</p>

<h5 id="lotfrontage">LotFrontage</h5>

<p>This is one of the features which a significant number of samples (486 / 2919) are missing. Lot frontage is defined as ‚Äúlinear feet of street connected to property.‚Äù Certainly we can draw the conclusion that <code>LotArea</code> might be correlated to <code>LotFrontage</code> since one is used to calculate the other, but there‚Äôs a few other features that can help us fill these in with greater accuracy.</p>

<p>First, let‚Äôs see the correlation between <code>LotArea</code> and <code>LotFrontage</code>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">merge_data</span><span class="p">[[</span><span class="s">'LotArea'</span><span class="p">,</span> <span class="s">'LotFrontage'</span><span class="p">]].</span><span class="n">corr</span><span class="p">()</span>
              <span class="n">LotArea</span>  <span class="n">LotFrontage</span>
<span class="n">LotArea</span>      <span class="mf">1.000000</span>     <span class="mf">0.489896</span>
<span class="n">LotFrontage</span>  <span class="mf">0.489896</span>     <span class="mf">1.000000</span></code></pre></figure>

<p>0.48 isn‚Äôt the best we‚Äôve seen - we can see something interesting happening if we sort these by another variable, <code>LotConfig</code>, which gives us more information about the layout of the lot.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">LotConfig</span><span class="p">:</span> <span class="n">Lot</span> <span class="n">configuration</span>

       <span class="n">Inside</span>   <span class="n">Inside</span> <span class="n">lot</span>
       <span class="n">Corner</span>   <span class="n">Corner</span> <span class="n">lot</span>
       <span class="n">CulDSac</span>  <span class="n">Cul</span><span class="o">-</span><span class="n">de</span><span class="o">-</span><span class="n">sac</span>
       <span class="n">FR2</span>  <span class="n">Frontage</span> <span class="n">on</span> <span class="mi">2</span> <span class="n">sides</span> <span class="n">of</span> <span class="nb">property</span>
       <span class="n">FR3</span>  <span class="n">Frontage</span> <span class="n">on</span> <span class="mi">3</span> <span class="n">sides</span> <span class="n">of</span> <span class="nb">property</span></code></pre></figure>

<p>Considering how Corner lots may have twice as much <code>LotFrontage</code> as Inside lots, and FR2s and FR3s should have comparitively more as well, this might help us calculate a more accurate prediction.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">h</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">lmplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">'LotArea'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">'LotFrontage'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">merge_data</span><span class="p">[</span><span class="n">merge_data</span><span class="p">[</span><span class="s">'LotArea'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">80000</span><span class="p">],</span> <span class="n">hue</span><span class="o">=</span><span class="s">'LotConfig'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span></code></pre></figure>

<p><img src="/assets/images/yLotFrontagexLotAreabyLotConfig.png" /></p>

<p>Note - I limited the <code>LotArea &lt;= 80000</code> since there was one outlier which skewed the whole figure off to the right, at over 200000 square feet.</p>

<p>Another way we can understand how this yields a more accurate prediction is by checking the correlation between <code>LotArea</code> and <code>LotFrontage</code> again, but this time grouped by <code>LotConfig</code>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">merge_data</span><span class="p">[</span><span class="n">merge_data</span><span class="p">[</span><span class="s">'LotArea'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">80000</span><span class="p">].</span><span class="n">groupby</span><span class="p">(</span><span class="s">'LotConfig'</span><span class="p">)[[</span><span class="s">'LotArea'</span><span class="p">,</span><span class="s">'LotFrontage'</span><span class="p">]].</span><span class="n">corr</span><span class="p">()</span>
                        <span class="n">LotArea</span>  <span class="n">LotFrontage</span>
<span class="n">LotConfig</span>                                   
<span class="n">Corner</span>    <span class="n">LotArea</span>      <span class="mf">1.000000</span>     <span class="mf">0.787955</span>
          <span class="n">LotFrontage</span>  <span class="mf">0.787955</span>     <span class="mf">1.000000</span>
<span class="n">CulDSac</span>   <span class="n">LotArea</span>      <span class="mf">1.000000</span>     <span class="mf">0.195327</span>
          <span class="n">LotFrontage</span>  <span class="mf">0.195327</span>     <span class="mf">1.000000</span>
<span class="n">FR2</span>       <span class="n">LotArea</span>      <span class="mf">1.000000</span>     <span class="mf">0.827626</span>
          <span class="n">LotFrontage</span>  <span class="mf">0.827626</span>     <span class="mf">1.000000</span>
<span class="n">FR3</span>       <span class="n">LotArea</span>      <span class="mf">1.000000</span>     <span class="mf">0.835891</span>
          <span class="n">LotFrontage</span>  <span class="mf">0.835891</span>     <span class="mf">1.000000</span>
<span class="n">Inside</span>    <span class="n">LotArea</span>      <span class="mf">1.000000</span>     <span class="mf">0.630001</span>
          <span class="n">LotFrontage</span>  <span class="mf">0.630001</span>     <span class="mf">1.000000</span></code></pre></figure>

<p>Comparing this to our previous correlations, there‚Äôs a strict improvement for all <code>LotConfig</code> features except for <code>CulDSac</code> which could be due to the irregular shape of <code>CulDSac</code> lots, and their disproportionately small <code>LotFrontage</code> measure. I predict that we can use the linear relationship between <code>LotArea</code> and <code>LotFrontage</code> grouped by <code>LotConfig</code> to fill in our missing <code>LotFrontage</code> feature.</p>

<h5 id="garagearea--garagecars">GarageArea / GarageCars</h5>

<p>This one is interesting because upon first glance, I thought ‚Äúok, if <code>GarageArea</code> is <code>NA</code> it must be because there‚Äôs no garage.‚Äù However, after examining this sample‚Äôs <code>GarageType</code>, it‚Äôs not the expected <code>None</code> but <code>Detchd</code> (Detatched from home). Now we‚Äôve got something interesting to work with!</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&gt;&gt;&gt;</span> <span class="n">merge_data</span><span class="p">[</span><span class="n">merge_data</span><span class="p">[</span><span class="s">'GarageCars'</span><span class="p">].</span><span class="n">isna</span><span class="p">()][[</span><span class="s">'GarageType'</span><span class="p">,</span> <span class="s">'GarageArea'</span><span class="p">,</span> <span class="s">'GarageCars'</span><span class="p">]]</span>

     <span class="n">GarageType</span>  <span class="n">GarageArea</span>  <span class="n">GarageCars</span>
<span class="mi">2576</span>     <span class="n">Detchd</span>         <span class="n">NaN</span>         <span class="n">NaN</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span></code></pre></figure>

<p>There‚Äôs going to be two parts here - first, finding the mean of all homes with <code>Detchd</code> garages, then finding the average number of cars based on this mean.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;&gt;&gt;&gt;</span> <span class="n">merge_data</span><span class="p">[</span><span class="n">merge_data</span><span class="p">[</span><span class="s">'GarageType'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'Detchd'</span><span class="p">][</span><span class="s">'GarageArea'</span><span class="p">].</span><span class="n">describe</span><span class="p">()</span>
<span class="n">count</span>     <span class="mf">778.000000</span>
<span class="n">mean</span>      <span class="mf">419.492288</span>
<span class="n">std</span>       <span class="mf">174.726572</span>
<span class="nb">min</span>       <span class="mf">100.000000</span>
<span class="mi">25</span><span class="o">%</span>       <span class="mf">280.000000</span>
<span class="mi">50</span><span class="o">%</span>       <span class="mf">399.500000</span>
<span class="mi">75</span><span class="o">%</span>       <span class="mf">528.000000</span>
<span class="nb">max</span>      <span class="mf">1488.000000</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span></code></pre></figure>

<p>We‚Äôll use 419.5 as our mean here, and find how many cars on average fit into a garage of this size.</p>

:ET